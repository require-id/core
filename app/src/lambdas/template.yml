AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: require.id API
Metadata:
  AWS::ServerlessRepo::Application:
    Name: require-id
    Description: require.id API
    Author: require-id
    HomePageUrl: https://require.id/
    SourceCodeUrl: https://github.com/require-id
Resources:
  RequireIDAPIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: execution
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  RequireIDGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: default
      EndpointConfiguration: EDGE
      DefinitionBody:
        openapi: 3.0.1
        info:
          version: "0.0.0"
          title: require.id API
          description: require.id API
        x-amazon-apigateway-api-key-source: HEADER
        components:
          securitySchemes:
            ApiKeyAuth:
              type: apiKey
              name: x-api-key
              in: header
        paths:
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequireIDLambda.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
                credentials: !GetAtt RequireIDAPIGatewayExecutionRole.Arn
          /app/{proxy+}:
            x-amazon-apigateway-auth:
              type: NONE_KEY
            x-amazon-apigateway-any-method:
              security:
              - ApiKeyAuth: []
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequireIDLambda.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
                credentials: !GetAtt RequireIDAPIGatewayExecutionRole.Arn
                security:
                - ApiKeyAuth: []
          /backup/{proxy+}:
            x-amazon-apigateway-auth:
              type: NONE_KEY
            x-amazon-apigateway-any-method:
              security:
              - ApiKeyAuth: []
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequireIDLambda.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
                credentials: !GetAtt RequireIDAPIGatewayExecutionRole.Arn
                security:
                - ApiKeyAuth: []
          /prompt/{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequireIDLambda.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
                credentials: !GetAtt RequireIDAPIGatewayExecutionRole.Arn
  RequireIDApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RequireIDUsagePlan
    Properties:
      Name: RequireIDApiKey
      Enabled: "true"
      StageKeys:
        - RestApiId: !Ref RequireIDGateway
          StageName: !Ref RequireIDGateway.Stage
  RequireIDUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RequireIDGateway
    Properties:
      ApiStages:
      - ApiId: !Ref RequireIDGateway
        Stage: !Ref RequireIDGateway.Stage
      UsagePlanName: RequireIDUsagePlan
  RequireIDUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties :
      KeyId: !Ref RequireIDApiKey
      UsagePlanId: !Ref RequireIDUsagePlan
      KeyType: API_KEY
  RequireIDLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.run
      Events:
        AppApi:
          Type: Api
          Properties:
            Path: /app/{proxy+}
            RestApiId: !Ref RequireIDGateway
            Method: ANY
        BackupApi:
          Type: Api
          Properties:
            Path: /backup/{proxy+}
            RestApiId: !Ref RequireIDGateway
            Method: ANY
        PromptApi:
          Type: Api
          Properties:
            Path: /prompt/{proxy+}
            RestApiId: !Ref RequireIDGateway
            Method: ANY
